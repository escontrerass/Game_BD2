-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.tbl_detalle_registro_compra
(
    id_detalle_registro_compra integer NOT NULL,
    id_registro_compra integer NOT NULL,
    sub_total integer NOT NULL,
    id_plataforma integer NOT NULL,
    id_tipo_pago_item integer NOT NULL,
    CONSTRAINT tbl_detalle_registro_compra_pkey PRIMARY KEY (id_detalle_registro_compra)
);

CREATE TABLE IF NOT EXISTS public.tbl_eliminacion_registro
(
    id_eliminacion_registro integer NOT NULL,
    fecha_eliminacion timestamp with time zone NOT NULL,
    id_usuario integer NOT NULL,
    CONSTRAINT tbl_eliminacion_registro_pkey PRIMARY KEY (id_eliminacion_registro)
);

CREATE TABLE IF NOT EXISTS public.tbl_historial_registro
(
    id_historial_registro integer NOT NULL,
    fecha_registro timestamp without time zone NOT NULL,
    id_usuario integer NOT NULL,
    CONSTRAINT tbl_historial_registro_pkey PRIMARY KEY (id_historial_registro)
);

CREATE TABLE IF NOT EXISTS public.tbl_item
(
    id_item integer NOT NULL,
    nombre_item character varying(100) COLLATE pg_catalog."default" NOT NULL,
    precio_item integer NOT NULL,
    CONSTRAINT tbl_item_pkey PRIMARY KEY (id_item)
);

CREATE TABLE IF NOT EXISTS public.tbl_plataforma
(
    id_plataforma integer NOT NULL,
    plataforma_nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tbl_plataforma_pkey PRIMARY KEY (id_plataforma)
);

CREATE TABLE IF NOT EXISTS public.tbl_registro_compra
(
    id_registro_compra integer NOT NULL,
    id_usuario integer NOT NULL,
    numero_factura integer NOT NULL,
    monto_total integer NOT NULL,
    fecha timestamp with time zone NOT NULL,
    CONSTRAINT tbl_registro_compra_pkey PRIMARY KEY (id_registro_compra)
);

CREATE TABLE IF NOT EXISTS public.tbl_registro_recarga
(
    id_registro_recarga integer NOT NULL,
    id_usuario integer NOT NULL,
    recarga_monto integer NOT NULL,
    fecha timestamp with time zone NOT NULL,
    CONSTRAINT tbl_registro_recarga_pkey PRIMARY KEY (id_registro_recarga)
);

CREATE TABLE IF NOT EXISTS public.tbl_tipo_pago
(
    id_tipo_pago integer NOT NULL,
    pago_nombre character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT tbl_tipo_pago_pkey PRIMARY KEY (id_tipo_pago)
);

CREATE TABLE IF NOT EXISTS public.tbl_tipo_tipo_pago_item
(
    id_tipo_pago_item integer NOT NULL,
    id_tipo_pago integer NOT NULL,
    id_item integer NOT NULL,
    CONSTRAINT tbl_tipo_tipo_pago_item_pkey PRIMARY KEY (id_tipo_pago_item)
);

CREATE TABLE IF NOT EXISTS public.tbl_usuario
(
    id_usuario integer NOT NULL,
    usuario_nombre character varying(50) COLLATE pg_catalog."default" NOT NULL,
    usuario_apellido character varying(50) COLLATE pg_catalog."default" NOT NULL,
    usuario_edad integer NOT NULL,
    usuario_genero boolean NOT NULL,
    usuario_region character varying(500) COLLATE pg_catalog."default" NOT NULL,
    usuario_tarjeta_credito character varying(100) COLLATE pg_catalog."default" NOT NULL,
    usuario_nick_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    usuario_password character varying(500) COLLATE pg_catalog."default" NOT NULL,
    usuario_saldo_total integer,
    usuario_correo character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tbl_usuario_pkey PRIMARY KEY (id_usuario)
);

ALTER TABLE IF EXISTS public.tbl_detalle_registro_compra
    ADD CONSTRAINT tbl_detalle_registro_compra_id_plataforma_fkey FOREIGN KEY (id_plataforma)
    REFERENCES public.tbl_plataforma (id_plataforma) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.tbl_detalle_registro_compra
    ADD CONSTRAINT tbl_detalle_registro_compra_id_registro_compra_fkey FOREIGN KEY (id_registro_compra)
    REFERENCES public.tbl_registro_compra (id_registro_compra) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.tbl_detalle_registro_compra
    ADD CONSTRAINT tbl_detalle_registro_compra_id_tipo_pago_item_fkey FOREIGN KEY (id_tipo_pago_item)
    REFERENCES public.tbl_tipo_tipo_pago_item (id_tipo_pago_item) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.tbl_eliminacion_registro
    ADD CONSTRAINT tbl_eliminacion_registro_id_usuario_fkey FOREIGN KEY (id_usuario)
    REFERENCES public.tbl_usuario (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.tbl_historial_registro
    ADD CONSTRAINT tbl_historial_registro_id_usuario_fkey FOREIGN KEY (id_usuario)
    REFERENCES public.tbl_usuario (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.tbl_registro_compra
    ADD CONSTRAINT tbl_registro_compra_id_usuario_fkey FOREIGN KEY (id_usuario)
    REFERENCES public.tbl_usuario (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.tbl_registro_recarga
    ADD CONSTRAINT tbl_registro_recarga_id_usuario_fkey FOREIGN KEY (id_usuario)
    REFERENCES public.tbl_usuario (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.tbl_tipo_tipo_pago_item
    ADD CONSTRAINT tbl_tipo_tipo_pago_item_id_item_fkey FOREIGN KEY (id_item)
    REFERENCES public.tbl_item (id_item) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.tbl_tipo_tipo_pago_item
    ADD CONSTRAINT tbl_tipo_tipo_pago_item_id_tipo_pago_fkey FOREIGN KEY (id_tipo_pago)
    REFERENCES public.tbl_tipo_pago (id_tipo_pago) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;